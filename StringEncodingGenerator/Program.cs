using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Cave;

namespace StringEncodingGenerator
{
    class Program
    {
        static StreamWriter writer;

        static void WriteLine(string text = null, params object[] args)
        {
            if (text == null)
            {
                Console.WriteLine();
                writer.WriteLine();
            }
            else if (!args.Any())
            {
                Console.WriteLine(text);
                writer.WriteLine(text);
            }
            else
            {
                Console.WriteLine(text, args);
                writer.WriteLine(text, args);
            }
        }

        static void Header()
        {
            WriteLine("using System.ComponentModel;");
            WriteLine();
            WriteLine("#pragma warning disable CA1707");
            WriteLine();
            WriteLine("namespace Cave.IO");
            WriteLine("{");
            WriteLine();
            WriteLine("\t/// <summary>Provides supported string encodings.</summary>");
            WriteLine("\tpublic enum StringEncoding");
            WriteLine("\t{");
            WriteLine("\t\t/// <summary>Character set not defined.</summary>");
            WriteLine("\t\tUndefined = 0,");
            WriteLine();
            WriteLine("\t\t#region internally handled fast encodings");
            WriteLine();
            WriteLine("\t\t/// <summary>7 Bit per character.</summary>");
            WriteLine("\t\t[Description(\"{0} | {1}\")]", Encoding.ASCII.EncodingName, Encoding.ASCII.WebName);
            WriteLine("\t\tASCII = 1,");
            WriteLine();
            WriteLine("\t\t/// <summary>8 Bit per character Unicode</summary>");
            WriteLine("\t\t[Description(\"{0} | {1}\")]", Encoding.UTF8.EncodingName, Encoding.UTF8.WebName);
            WriteLine("\t\tUTF8 = 2,");
            WriteLine();
            WriteLine("\t\t/// <summary>Little endian 16 Bit per character unicode.</summary>");
            WriteLine("\t\t[Description(\"{0} | {1}\")]", Encoding.Unicode.EncodingName, Encoding.Unicode.WebName);
            WriteLine("\t\tUTF16 = 3,");
            WriteLine();
            WriteLine("\t\t/// <summary>Little endian 32 Bit per character unicode.</summary>");
            WriteLine("\t\t[Description(\"{0} | {1}\")]", Encoding.UTF32.EncodingName, Encoding.UTF32.WebName);
            WriteLine("\t\tUTF32 = 4,");
            WriteLine();
            WriteLine("\t\t#endregion internally handled fast encodings");
            WriteLine();
        }

        static void Main()
        {
            Thread.CurrentThread.CurrentUICulture =
                Thread.CurrentThread.CurrentCulture =
                    CultureInfo.InvariantCulture;

            writer = File.CreateText("StringEncoding.cs");
            Header();
            WriteLine("\t\t#region autogenerated enum values");
            Dictionary<string, int> names = new();
            foreach (var item in Encoding.GetEncodings().ToDictionary(e => e.CodePage).OrderBy(e => e.Key))
            {
                var encodingInfo = item.Value;
                var encoding = item.Value.GetEncoding();
                WriteLine("\t\t/// <summary>{0}</summary>", encodingInfo.DisplayName);
                WriteLine("\t\t/// <remarks>Codepage: {0}, Windows Codepage: {1}</remarks>", encoding.CodePage, encoding.WindowsCodePage);
                WriteLine("\t\t[Description(\"{0} | {1}\")]", encoding.EncodingName, encoding.WebName);
                var name = encodingInfo.Name.ReplaceInvalidChars(ASCII.Strings.Letters + ASCII.Strings.Digits, "_").ToUpper();
                names.TryGetValue(name, out var number);
                names[name] = ++number;
                if (number > 1) name += "_" + number;
                WriteLine("\t\t{0} = {1},", name, item.Key);
                WriteLine();
            }
            WriteLine("\t\t#endregion autogenerated enum values");
            WriteLine("\t}");
            WriteLine("}");
            writer.Close();
        }
    }
}
